// <auto-generated />
using System;
using InnoGotchi.API.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InnoGotchi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230910163816_AddCollaborations")]
    partial class AddCollaborations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BodyPartPet", b =>
                {
                    b.Property<Guid>("BodyPartsBodyPartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetsPetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BodyPartsBodyPartId", "PetsPetId");

                    b.HasIndex("PetsPetId");

                    b.ToTable("BodyPartPet");
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.BodyPart", b =>
                {
                    b.Property<Guid>("BodyPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodyPartId");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            BodyPartId = new Guid("944f6994-cd24-453c-b5b7-6935204bfb36"),
                            ImageUrl = "body1.svg",
                            Name = "Body"
                        },
                        new
                        {
                            BodyPartId = new Guid("abbd653d-9680-4a0c-a485-3ec45d083bdc"),
                            ImageUrl = "body2.svg",
                            Name = "Body"
                        },
                        new
                        {
                            BodyPartId = new Guid("cccc548f-4e0e-4d81-bf42-d04c18fedbca"),
                            ImageUrl = "body3.svg",
                            Name = "Body"
                        },
                        new
                        {
                            BodyPartId = new Guid("df44186a-08cb-454a-95ac-09e98800ef2d"),
                            ImageUrl = "body4.svg",
                            Name = "Body"
                        },
                        new
                        {
                            BodyPartId = new Guid("12a069ba-b2c0-41ed-937e-a692c80382bd"),
                            ImageUrl = "body5.svg",
                            Name = "Body"
                        },
                        new
                        {
                            BodyPartId = new Guid("1238384b-7b34-4552-905d-cd9a9f467e4f"),
                            ImageUrl = "eyes1.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("74b4f808-699a-4488-b2de-9b2d4b396c77"),
                            ImageUrl = "eyes2.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("c5d6e6d8-a8bd-45f1-bf21-f0225fb7e505"),
                            ImageUrl = "eyes3.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("0c005e01-4116-459a-bdba-02ccfcc028ae"),
                            ImageUrl = "eyes4.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("f6bda2d8-d5dd-47a0-a77c-0dbaff44b18a"),
                            ImageUrl = "eyes5.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("54f39dbf-3c9d-47d7-aef4-c37da00f2050"),
                            ImageUrl = "eyes6.svg",
                            Name = "Eyes"
                        },
                        new
                        {
                            BodyPartId = new Guid("7571ae17-cc89-405d-8cfc-26da317519b0"),
                            ImageUrl = "mouth1.svg",
                            Name = "Mouth"
                        },
                        new
                        {
                            BodyPartId = new Guid("23886d38-9d49-4b23-9c63-3a1d95bbd56a"),
                            ImageUrl = "mouth2.svg",
                            Name = "Mouth"
                        },
                        new
                        {
                            BodyPartId = new Guid("3d4a10be-9217-4ff9-9f7d-456ae9859d5f"),
                            ImageUrl = "mouth3.svg",
                            Name = "Mouth"
                        },
                        new
                        {
                            BodyPartId = new Guid("f03a8c14-6e8d-4ab3-a569-d28117fcbc56"),
                            ImageUrl = "mouth4.svg",
                            Name = "Mouth"
                        },
                        new
                        {
                            BodyPartId = new Guid("7544cbc5-8277-49e4-87db-71f836fdf2e3"),
                            ImageUrl = "mouth5.svg",
                            Name = "Mouth"
                        },
                        new
                        {
                            BodyPartId = new Guid("2fed2577-e95d-4d54-84e3-b1938cab02b0"),
                            ImageUrl = "nose1.svg",
                            Name = "Nose"
                        },
                        new
                        {
                            BodyPartId = new Guid("b552a88f-8c93-4ab1-bde0-d40e25323d86"),
                            ImageUrl = "nose2.svg",
                            Name = "Nose"
                        },
                        new
                        {
                            BodyPartId = new Guid("3a476d22-c79a-4a31-bbf2-e7ade8836ab7"),
                            ImageUrl = "nose3.svg",
                            Name = "Nose"
                        },
                        new
                        {
                            BodyPartId = new Guid("84baae8a-8d2c-4b68-9d43-92927d174f70"),
                            ImageUrl = "nose4.svg",
                            Name = "Nose"
                        },
                        new
                        {
                            BodyPartId = new Guid("85883b2e-23af-45e5-8514-c2f490af90a5"),
                            ImageUrl = "nose5.svg",
                            Name = "Nose"
                        },
                        new
                        {
                            BodyPartId = new Guid("0915c10a-2988-4ea8-a956-682e49447401"),
                            ImageUrl = "nose6.svg",
                            Name = "Nose"
                        });
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Collaboration", b =>
                {
                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FarmId");

                    b.HasIndex("UserId");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Farm", b =>
                {
                    b.Property<Guid>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FarmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DaysOfHappiness")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DrinkingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FeedingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PetId");

                    b.HasIndex("FarmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("InnoGotchi.Core.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BodyPartPet", b =>
                {
                    b.HasOne("InnoGotchi.API.Core.Entities.Models.BodyPart", null)
                        .WithMany()
                        .HasForeignKey("BodyPartsBodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnoGotchi.API.Core.Entities.Models.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsPetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Collaboration", b =>
                {
                    b.HasOne("InnoGotchi.API.Core.Entities.Models.Farm", "Farm")
                        .WithMany("Collaborations")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InnoGotchi.Core.Entities.Models.User", "User")
                        .WithMany("Collaborations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Farm", b =>
                {
                    b.HasOne("InnoGotchi.Core.Entities.Models.User", "User")
                        .WithOne("Farm")
                        .HasForeignKey("InnoGotchi.API.Core.Entities.Models.Farm", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Pet", b =>
                {
                    b.HasOne("InnoGotchi.API.Core.Entities.Models.Farm", "Farm")
                        .WithMany("Pets")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("InnoGotchi.Core.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("InnoGotchi.Core.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnoGotchi.Core.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("InnoGotchi.Core.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnoGotchi.API.Core.Entities.Models.Farm", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("InnoGotchi.Core.Entities.Models.User", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Farm")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
